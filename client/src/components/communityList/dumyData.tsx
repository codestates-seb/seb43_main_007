import type { ListDataProps } from "./listTypes";

const data: ListDataProps[] = [
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjJi",
      createdAt: "2022-05-16",
      title: "koans 과제 진행 중 npm install 오류로 인해 정상 작동 되지 않습니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/45",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg6M",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/45#discussioncomment-2756236",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dubipy/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dubipy">@dubipy</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁 입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 노드 환경이 구성되어 있지 않기 때문에 발생되는 문제로 확인됩니다.</p>\n<p dir="auto"><code class="notranslate">brew unlink node &amp;&amp; brew link node</code></p>\n<p dir="auto">노드를 연결해 보시고 안된다면</p>\n<p dir="auto"><code class="notranslate">brew link --overwrite node</code></p>\n<p dir="auto">이 명령어를 그 다음에도 안된다면 접근권한 문제일 가능성이 큽니다.</p>\n<p dir="auto"><code class="notranslate">$ sudo chmod 776 /usr/local/lib</code> 접근 권한 변경 후<br>\n<code class="notranslate">$ brew link --overwrite node</code> 다시 연결을 해보세요 !</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문을 남겨주세요 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nPair 과제 / JavaScript Koans</p>\n<p dir="auto">npm install 명령어 입력 시 env: node: No such file or directory 라고 뜹니다</p>\n<p dir="auto">에러 발생하여 아래 명령어 실행 했는데도 불구하고 똑같은 에러가 발생했습니다<br>\nnpm cache clean --force</p>\n<p dir="auto">rm package-lock.json</p>\n<p dir="auto">rm -rf ./node_modules/</p>\n<p dir="auto">npm --verbose install</p>\n<p dir="auto">폴더 자체가 문제가 있다고 생각하여 github에서 다시 fork 후 진행했는데도 같은 에러가 발생했습니다<br>\n리눅스 기초 챕터 때 npm 설치해서 마지막 submit까지는 잘 됐는데 현재 짝수 생성기 폴더도 똑같이 npm install 시 no such file or directory가 발생합니다</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="minjun@dubi fe-sprint-javascript-koans-main % pwd \n/Users/minjun/Documents/fe_frontand_39/fe-sprint-javascript-koans-main\nminjun@dubi fe-sprint-javascript-koans-main % npm install \nenv: node: No such file or directory"><pre><span class="pl-s1">minjun</span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">pwd</span> \n<span class="pl-c1">/</span><span class="pl-v">Users</span><span class="pl-c1">/</span><span class="pl-s1">minjun</span><span class="pl-c1">/</span><span class="pl-v">Documents</span><span class="pl-c1">/</span><span class="pl-s1">fe_frontand_39</span><span class="pl-c1">/</span><span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span>\n<span class="pl-s1">minjun</span><span class="pl-kos"></span>@<span class="pl-s1">dubi</span> <span class="pl-s1">fe</span><span class="pl-c1">-</span><span class="pl-s1">sprint</span><span class="pl-c1">-</span><span class="pl-s1">javascript</span><span class="pl-c1">-</span><span class="pl-s1">koans</span><span class="pl-c1">-</span><span class="pl-s1">main</span> <span class="pl-c1">%</span> <span class="pl-s1">npm</span> <span class="pl-s1">install</span> \nenv: node: <span class="pl-v">No</span> <span class="pl-s1">such</span> <span class="pl-s1">file</span> <span class="pl-s1">or</span> <span class="pl-s1">directory</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://mia-dahae.tistory.com/89" rel="nofollow">https://mia-dahae.tistory.com/89</a></p>\n<p dir="auto"><a href="https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory" rel="nofollow">https://stackoverflow.com/questions/38143558/npm-install-resulting-in-enoent-no-such-file-or-directory</a></p>\n<p dir="auto"><a href="https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0" rel="nofollow">https://velog.io/@hn04147/npm-install-%ED%95%A0-%EB%95%8C-tar-ENOENT-no-such-file-or-directory-lstat-%EC%97%90%EB%9F%AC%EB%82%A0-%EA%B2%BD%EC%9A%B0</a></p>\n<p dir="auto"><a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346" rel="nofollow">https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=chandong83&amp;logNo=221064506346</a></p>\n<p dir="auto"><a href="https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80" rel="nofollow">https://webisfree.com/2021-07-15/npm-install-%EC%97%90%EB%9F%AC-%EB%B0%9C%EC%83%9D-rename-no-such-file-or-directory-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B0%80</a></p>\n<p dir="auto"><a href="https://hellowworlds.tistory.com/57" rel="nofollow">https://hellowworlds.tistory.com/57</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/97888923?s=64&u=12b18768cdeebcf358b70051283a3ef57be6a20f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APjIj",
      createdAt: "2022-05-15",
      title: "반복되는 문자 리턴 문제에서 ' '(공백하나인 문자열)입력시 오류가 발생합니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/44",
      author: "dltpdud",
      answer: null,
      bodyHTML:
         '<ul dir="auto">\n<li>\n<p dir="auto">운영 체제: macOS</p>\n</li>\n<li>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</p>\n</li>\n</ul>\n<p dir="auto">코플릿 객체 21번 문제에서 \' \'(공백하나인 문자열)입력시 오류가 발생합니다.</p>\n<ul dir="auto">\n<li>어떠한 부분에서 이해가 안 되었나요?</li>\n</ul>\n<p dir="auto">빈 문자열을 입력받은 경우, 빈 문자열을 리턴해야 합니다.<br>\n라는 주의사항에 맞게 조건문을   <code class="notranslate">if(str === \' \'){ return bigChar;}</code> 추가했습니다.<br>\n그런데 테스트 실행할때 주석처리한 아래 3줄이 활성화 되어있으면</p>\n<blockquote>\n<p dir="auto">\' \'을(를) 입력받은 경우, 빈 문자열을 리턴해야 합니다 "</p>\n</blockquote>\n<p dir="auto">이라는 지문에서 통과가 안되고 \' \'(공백하나인 문자열)이 리턴된다고 나옵니다.<br>\n크롬 디버거할때는<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png"><img width="485" alt="image" src="https://user-images.githubusercontent.com/90553688/168499795-ccd028a3-6c1e-452d-83e7-0144b8b823e4.png" style="max-width: 100%;"></a><br>\n빈 문자열로 뜨는것 같은데 어느부분에서 문제가 되는걸까요??</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function mostFrequentCharacter(str) {\n\n  let newObj = {};\n  let bigChar = \'\';\n  let bigNum = 1;\n\n  if(str === \' \'){\n    return bigChar;\n  }\n  \n  for(let i = 0; i&lt; str.length; i++){\n    // if(i === 0){     &lt;----------------------여기 부분\n    //   bigChar = str[0];\n    // }\n\n    let key = str[i];\n    if(key === \' \'){\n      continue;\n    }\n\n    if(!(key in newObj)){\n      newObj[key] = 1;\n    } else{\n      newObj[key]++;\n    }\n\n    if(newObj[key] &gt; bigNum){\n      bigNum = newObj[key];\n      bigChar = key;\n    }\n  }\n  return bigChar;\n}\n"><pre><span class="pl-k">function</span> <span class="pl-en">mostFrequentCharacter</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n\n  <span class="pl-k">let</span> <span class="pl-s1">newObj</span> <span class="pl-c1">=</span> <span class="pl-kos">{</span><span class="pl-kos">}</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s">\'\'</span><span class="pl-kos">;</span>\n  <span class="pl-k">let</span> <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n\n  <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">str</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n  <span class="pl-kos">}</span>\n  \n  <span class="pl-k">for</span><span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n    <span class="pl-c">// if(i === 0){     &lt;----------------------여기 부분</span>\n    <span class="pl-c">//   bigChar = str[0];</span>\n    <span class="pl-c">// }</span>\n\n    <span class="pl-k">let</span> <span class="pl-s1">key</span> <span class="pl-c1">=</span> <span class="pl-s1">str</span><span class="pl-kos">[</span><span class="pl-s1">i</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-c1">===</span> <span class="pl-s">\' \'</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-k">continue</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-c1">!</span><span class="pl-kos">(</span><span class="pl-s1">key</span> <span class="pl-k">in</span> <span class="pl-s1">newObj</span><span class="pl-kos">)</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">=</span> <span class="pl-c1">1</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span> <span class="pl-k">else</span><span class="pl-kos">{</span>\n      <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-c1">++</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n\n    <span class="pl-k">if</span><span class="pl-kos">(</span><span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span> <span class="pl-c1">&gt;</span> <span class="pl-s1">bigNum</span><span class="pl-kos">)</span><span class="pl-kos">{</span>\n      <span class="pl-s1">bigNum</span> <span class="pl-c1">=</span> <span class="pl-s1">newObj</span><span class="pl-kos">[</span><span class="pl-s1">key</span><span class="pl-kos">]</span><span class="pl-kos">;</span>\n      <span class="pl-s1">bigChar</span> <span class="pl-c1">=</span> <span class="pl-s1">key</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n  <span class="pl-kos">}</span>\n  <span class="pl-k">return</span> <span class="pl-s1">bigChar</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APi4R",
      createdAt: "2022-05-15",
      title: "JavaScript Koans 04_Scope 문제의 innerFn()에 대하여 질문드립니다!",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/43",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKg7z",
         createdAt: "2022-05-16",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/43#discussioncomment-2756339",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/anotheranotherhoon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/anotheranotherhoon">@anotheranotherhoon</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">스코프와 클로져에 대해 깊게 공부하는 모습 너무 너무 좋습니다 !</p>\n<p dir="auto">일단 즉시 실행 함수 표현식에 대해 질문 주셨는데요 !<br>\n함수를 정의 -&gt; 변수에 함수를 저장 하고 실행 ! 이 과정을 거치지 않고 정의하자마자 바로 호출하는 것이 즉시 실행 함수 입니다.<br>\n그렇다면 위에 코드는 즉시 실행 함수 일까요?</p>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Glossary/IIFE" rel="nofollow">즉시실행함수</a><br>\n한 번 읽어보시고 한 번 더 생각해보세요 ! 직접 생각하는 것이 가장 기억에 오래 남습니다 !</p>\n<p dir="auto">두 번째 <code class="notranslate">innerFn</code>이라는 변수를 새로 선언했고 <code class="notranslate">outerFn()</code>을 할당했습니다. 즉, <code class="notranslate">outerFn()</code>을 호출 한 것입니다.<br>\n이는 위의 <code class="notranslate">innerFn</code> 함수와는 다른 녀석입니다.<code class="notranslate">innerFn</code> 함수도 마찬가지로 <code class="notranslate">outerFn</code> 내부에서 선언되었으므로 밖으로 나올 수 없기 때문이에요!</p>\n<p dir="auto"><code class="notranslate">const apple = outerFn()</code>  // innerFn은 단순한 변수명임 ! apple을 넣던 banana를 넣던 상관없음<br>\n<code class="notranslate">expect(apple()).to.equal(178)</code></p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 000</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">--------------- 여기서부터 복사하세요 ---------------</p>\n<p dir="auto">운영 체제: 예) macOS, Ubuntu<br>\nmacOS<br>\nNode.js 버전(node -v): 예)v14.16.0<br>\nv12.18.14</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nJavaScript Koans 04_Scope.js 문제 해결중</p>\n<div class="snippet-clipboard-content position-relative overflow-auto" data-snippet-clipboard-copy-content="it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });"><pre class="notranslate"><code class="notranslate">it(\'lexical scope와 closure에 대해 다시 확인합니다.\', function () {\n    let age = 27;\n    let name = \'jin\';\n    let height = 179;\n\n    function outerFn() {\n      let age = 24;\n      name = \'jimin\';\n      let height = 178;\n\n      function innerFn() {\n        age = 26;\n        let name = \'suga\';\n        return height;\n      }\n\n      innerFn();\n\n      expect(age).to.equal(26);\n      expect(name).to.equal(\'jimin\');\n\n      return innerFn;\n    }\n\n    const innerFn = outerFn(); //  &lt; --- ①  이부분에 대해서\n\n    expect(age).to.equal(27);\n    expect(name).to.equal(\'jimin\');\n    expect(innerFn()).to.equal(178); // &lt;---  ② \n  });\n</code></pre></div>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?</p>\n<ol dir="auto">\n<li>\n<p dir="auto">① 부분에서 innerFn이라는 변수에 outerFn()을 할당했습니다.<br>\n변수에 함수호출문을 할당했다고 해석했습니다.<br>\n그렇다면 ①에서 const innerFn을 할당함과 동시에 할당을 하게되는 outerFn함수가 실행되나요?<br>\n그렇다면 ①도 즉시 실행 함수표현식인가요??</p>\n</li>\n<li>\n<p dir="auto">②에서 호출하는 innerFn()은 outerFn() 함수 내의 innerFn()을 호출 한 것인가요?<br>\n아니면 ①을 통해 innerFn호출에 의해 outerFn으로 접근하여 innerFn에 접근한 것인가요?</p>\n</li>\n</ol>\n<p dir="auto">제 생각에는 outerFn스코프내의 함수outerFn으로 바로 접근하는것이 바깥에서는 안으로 진입할 수 없는 규칙에 위배된다 생각합니다.</p>\n<p dir="auto">함수호이스팅은 함수내에 있는 함수까지 호이스팅 되어 전역으로 접근가능한건가요?</p>\n<p dir="auto">변수명과 함수명이 중복되어 공부하는 과정에서 잘못 이해하고 넘어갈 수 도 있을 것 같아 정확히 알아보기위해 질문을 남깁니다 감사합니다.</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/77476348?s=64&u=64243db62117de5c254c9a76184753b76d7303ff&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh3j",
      createdAt: "2022-05-13",
      title: "Unit10/Checkpoint2/종합퀴즈2/6번 관련하여 클로저의 효용성에 대해 질문드립니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/42",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdo2",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/42#discussioncomment-2742838",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">아래 작성해주신 코드내용처럼 isShow를 전역변수로 선언해서 실행하셔도 크게 문제는 일어나지 않습니다.</p>\n<p dir="auto">다만 isShow를 굳이 클로저를 활용해 접근하는 이유는 클로저를 사용하는 것이 <strong>상태를 안전하게 변경하고 유지할 수 있기 때문</strong>입니다.</p>\n<p dir="auto">아래 코드의 경우 isShow가 전역 스코프에 있기 때문에 toggle함수 말고도, 다른 모든 부분에서도 isShow를 참조할 수 있고, 변경할 수 있습니다.</p>\n<p dir="auto">isShow는 토글의 display를 block으로 해줄지, none으로 해줄지를 나타내는 용도로만 쓰여야되는데, 모든 곳에서 참조 및 변경이 가능하다면 <strong>의도치 않은 변경에 의한 오류</strong>를 야기시킬 수 있습니다.</p>\n<p dir="auto">따라서 클로저를 통해 내부함수말고는 접근할 수 없게끔 만들어주는 것이 상태를 안전하게 보관할 수 있는 것입니다.</p>\n<p dir="auto">이 내용은 오늘 줌 강의시간에 크루님이 말씀해주신 캡슐화나 정보은닉과도 깊은 연관이 있다고 생각됩니다 :)</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
      },
      bodyHTML:
         '<p dir="auto">안녕하세요! 클로저의 효용성에 의문이 들어 질문 드립니다!</p>\n<p dir="auto">클로저를 사용하는 정답코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n\n        var toggle = (function () {\n            var isShow = false;\n            // TODO: ① 클로저를 반환하는 함수를 작성하세요.\n            return function () {\n                // TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.\n                box.style.display = isShow ? \'block\' : \'none\';\n                isShow = !isShow;\n            };\n        })();\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-k">var</span> <span class="pl-s1">toggle</span> <span class="pl-c1">=</span> <span class="pl-kos">(</span><span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n            <span class="pl-c">// TODO: ① 클로저를 반환하는 함수를 작성하세요.</span>\n            <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n                <span class="pl-c">// TODO: ③ isShow 변수의 상태를 변경하는 코드를 작성하세요.</span>\n                <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n                <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span>\n            <span class="pl-kos">}</span><span class="pl-kos">;</span>\n        <span class="pl-kos">}</span><span class="pl-kos">)</span><span class="pl-kos">(</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-s1">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">전역 변수를 통해 상태를 관리하는 코드</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="        var box = document.querySelector(\'.box\');\n        var toggleBtn = document.querySelector(\'.toggle\');\n        var isShow = false;\n        var toggle = function () {\n            box.style.display = isShow ? \'block\' : \'none\';\n            isShow = !isShow; // 전역 변수에 적용\n        };\n\n        // ② 이벤트 프로퍼티에 클로저를 할당\n        toggleBtn.onclick = toggle;"><pre>        <span class="pl-k">var</span> <span class="pl-s1">box</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.box\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">toggleBtn</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.toggle\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">false</span><span class="pl-kos">;</span>\n        <span class="pl-k">var</span> <span class="pl-en">toggle</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n            <span class="pl-s1">box</span><span class="pl-kos">.</span><span class="pl-c1">style</span><span class="pl-kos">.</span><span class="pl-c1">display</span> <span class="pl-c1">=</span> <span class="pl-s1">isShow</span> ? <span class="pl-s">\'block\'</span> : <span class="pl-s">\'none\'</span><span class="pl-kos">;</span>\n            <span class="pl-s1">isShow</span> <span class="pl-c1">=</span> <span class="pl-c1">!</span><span class="pl-s1">isShow</span><span class="pl-kos">;</span> <span class="pl-c">// 전역 변수에 적용</span>\n        <span class="pl-kos">}</span><span class="pl-kos">;</span>\n\n        <span class="pl-c">// ② 이벤트 프로퍼티에 클로저를 할당</span>\n        <span class="pl-s1">toggleBtn</span><span class="pl-kos">.</span><span class="pl-c1">onclick</span> <span class="pl-c1">=</span> <span class="pl-en">toggle</span><span class="pl-kos">;</span></pre></div>\n<p dir="auto">아래처럼 isShow를 전역변수로 선언하고, 그 상태를 토대로 스타일을 적용해주어도 똑같이 동작하는데, 굳이 클로저를 활용하는 이유가 궁금합니다.</p>\n<p dir="auto">이렇게 토글버튼 등에서 클로저를 활용하는 경우는 나중에 코드가 방대해졌을 때, 동작과 상태가 한번에 묶여있는 형태가 유지보수하기 용이해서 활용하는 것인가요? 혹은 다른이유가 있는지 궁금합니다.</p>\n<p dir="auto">감사합니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/87750478?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APh17",
      createdAt: "2022-05-13",
      title: "클로저 함수의 특징 설명 중 '함수를 리턴하는 함수'가 이해가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/41",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKdsX",
         createdAt: "2022-05-13",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/41#discussioncomment-2743063",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Hong-sk/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Hong-sk">@Hong-sk</a> 님! 클로저 함수라는 워딩이 다소 오해가 있어보입니다.<br>\n향후 콘텐츠 업데이트를 통해 "클로저 함수"라는 워딩은 장기적으로 쓰지 않을 예정입니다.</p>\n<p dir="auto">나중에 다른 분들과 소통할 때는 아래 코드에서<br>\n"외부 함수(outer)", "내부 함수(inner)"라는 표현 정도는 사용할 수 있겠습니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const outer = function (x) {\n    const inner = function (y) {\n        return x + y;\n    }\n    return inner;\n}"><pre><span class="pl-k">const</span> <span class="pl-en">outer</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">const</span> <span class="pl-en">inner</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-en">inner</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<blockquote>\n<p dir="auto">내부 함수는 외부 함수 스코프에 접근할 수 있기 때문에, 매개변수 x의 값을 조회할 수 있다.</p>\n</blockquote>\n<p dir="auto">정도의 표현을 사용해주시면 무난하겠습니다! <g-emoji class="g-emoji" alias="smile" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png">😄</g-emoji></p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: Ubuntu</p>\n<p dir="auto">Node.js 버전(node -v): v16.14.2</p>\n<h3 dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?</h3>\n<p dir="auto">Unit10 / chpater3-클로저 함수의 특징 개념학습을 진행하다 이해가 되지 않는 부분이 있어 질문 드립니다.</p>\n<h3 dir="auto">어떠한 부분에서 이해가 안 되었나요?</h3>\n<p dir="auto">개념 설명 5번째 슬라이드에서</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const adder = function (x) {\n    return function (y) {\n        return x + y;\n    }\n}\n"><pre><span class="pl-k">const</span> <span class="pl-en">adder</span> <span class="pl-c1">=</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">x</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">return</span> <span class="pl-k">function</span> <span class="pl-kos">(</span><span class="pl-s1">y</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-k">return</span> <span class="pl-s1">x</span> <span class="pl-c1">+</span> <span class="pl-s1">y</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">위와 같은 코드를 예시를 들어주며</p>\n<blockquote>\n<p dir="auto">클로저 함수는 위와 비슷한 모양을 갖고 있습니다. 이를 통해 알아볼 수 있는 첫 번째 특징은, 클로저 함수는 <strong>"함수를 리턴하는 함수"</strong> 라는 점입니다. 함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 설명이 적혀 있습니다.</p>\n<p dir="auto">위의 코드만을 두고 생각을 해 보았을 때 함수를 return해주는 함수는 adder이며 그 안에서 반환되는 익명함수는 x+y를 리턴해줄뿐 함수를 리턴해주고 있지는 않습니다.  <strong>즉, 맥락상으로는 adder함수가 클로저 함수라고 생각할 수 있는 것처럼 보입니다.</strong></p>\n<p dir="auto">하지만 제가 이해한 클로저 함수는 \'외부 환경의 렉시컬 환경, 즉 상위스코프를 참조하는 내부함수\'이고</p>\n<p dir="auto">또 챕터 3. 클로저 개요에도</p>\n<blockquote>\n<p dir="auto">이와 같은 이유로 "외부 함수의 변수에 접근할 수 있는 내부 함수"를 클로저 함수라고 합니다.</p>\n</blockquote>\n<p dir="auto">라고 나와있습니다.</p>\n<p dir="auto">이에 따르면</p>\n<blockquote>\n<p dir="auto">함수를 리턴하는 함수가 클로저의 형태를 만듭니다.</p>\n</blockquote>\n<p dir="auto">라는 문장은 맞는 말일 수 있다고 생각하지만</p>\n<blockquote>\n<p dir="auto">클로저 함수는 \'함수를 리턴하는 함수\' 라는 점입니다.</p>\n</blockquote>\n<p dir="auto">라는 설명은 잘못된 문장이거나, 맥락상 오해의 소지를 불러 일으킬 수 있는 문장이라고 생각합니다.</p>\n<p dir="auto">혹시 제가 잘못된 내용으로 이해했다거나 바로잡아주실 부분이 있으시다면 설명 부탁드려도 될까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/61141988?s=64&u=92c71910d9f6409d38d40d7d5a0a094d8ec647ed&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgSk",
      createdAt: "2022-05-10",
      title: "코플릿 배열 24번에 replaceAll을 쓰면 통과가 안되는 이유가 무엇인가요?.?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/40",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKZuk",
         createdAt: "2022-05-11",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/40#discussioncomment-2726820",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/jindory/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/jindory">@jindory</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">코플릿에서 replaceAll 사용이 되질 않아서 답답하셨겠군요..!</p>\n<p dir="auto">현재 저희가 제공중인 코플릿 서버 버전은 node.js 14버전입니다.<br>\n그렇다보니 15버전 이후 지원되는 replaceAll 메서드 사용이 불가합니다.<br>\n향후 버전 업그레이드를 진행할 것이나, 지금은 이를 참고하시어 코스를 진행해주시면 감사하겠습니다.</p>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<g-emoji class="g-emoji" alias="chipmunk" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f43f.png">🐿️</g-emoji><br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APgDd",
      createdAt: "2022-05-10",
      title: "코플릿 배열 18번 인스턴스(주소값 동일)에 대해 알고 싶습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/39",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYNk",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/39#discussioncomment-2720612",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">객체를 변수에 저장하게되면 실제 객체를 저장하는것이 아닌 객체를 저장한 메모리의 주소(참조)값을 변수에 저장하게돼요.</p>\n<p dir="auto"><code class="notranslate">입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다</code></p>\n<p dir="auto">이 조건이 만족 안된 이유는 slice() 메소드는 문자열 슬라이싱을 한 뒤 새로운 배열 객체에 저장하여 반환하게됩니다. 그렇기에 반환값(객체)이 arr객체와 다른 객체이기 때문에 다른 주소값을 가르키게되고 주솟값이 동일해야한다는 조건을 만족시키지 못하게됩니다.</p>\n<p dir="auto"><code class="notranslate">🟡AssertionError: expected [ 2, 3 ] to equal [ 1 ]</code><br>\nsplice() 메소드의 경우 기존 배열에서 요소를 삭제하고 삭제한 요소들을 반환하기 때문에 반환값(객체)과 arr객체의 주소값도 다를뿐더러 기존 객체에서 요소 제거가 일어났기 때문에 arr 객체엔 요소가 1만 남아있게 된 겁니다.</p>\n<p dir="auto">만약 splice() 메소드를 사용하실 때 첫 번째 요소를 제거해야하니 0번째 인덱스에서 1개의 요소를 제거하고 기존 객체인 arr을 반환하게 된다면 모든 조건을 통과하실거에요.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function removeFromFront(arr) {\n    arr.splice(0,1);    // 0번째 index에서 1개의 item 제거\n    return arr;    // 기존 배열에 첫번째 item이 삭제된 배열 반환\n}"><pre><span class="pl-k">function</span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">1</span><span class="pl-kos">)</span><span class="pl-kos">;</span>    <span class="pl-c">// 0번째 index에서 1개의 item 제거</span>\n    <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">;</span>    <span class="pl-c">// 기존 배열에 첫번째 item이 삭제된 배열 반환</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto"><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - slice 메소드</a><br>\n<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#%EC%84%A4%EB%AA%85" rel="nofollow">mdn - splice 메소드</a></p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/71388830?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제: macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요? : 코플릿 배열 18번 removeFromFront 문제</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요? :<br>\n테스트 실행을 해서 "입력받은 배열과 동일한 인스턴스(주소값 동일)을(를) 리턴해야 합니다"라는 조건을 충족시키지 못했습니다.<br>\n여기서 말하는 인스턴스라는 개념을 이해하지 못했습니다.</p>\n<p dir="auto">이 문제를 splice와 slice로 풀었는데 아래와 같이 다른 오류 코드를 받았습니다.<br>\n모두 문제가 원하는 출력값인 [2,3]이 나오는데,<br>\nslice로 풀었을때는 [1,2,3]이 나와야 하고<br>\nsplice로 풀었을때는 [1]이 나와야 하는지 알고 싶습니다.</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요. :</p>\n<p dir="auto"><g-emoji class="g-emoji" alias="green_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e2.png">🟢</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1, 2, 3 ]<br>\n<g-emoji class="g-emoji" alias="yellow_circle" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f7e1.png">🟡</g-emoji>AssertionError: expected [ 2, 3 ] to equal [ 1 ]</p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="//\n🟢function removeFromFront(arr) {\n  return arr.slice(1,arr.length);\n} \n\n🟡function removeFromFront(arr) {\n  return arr.splice(1,arr.length);\n}"><pre><span class="pl-c">//</span>\n<span class="pl-s1">🟢function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span> \n\n<span class="pl-s1">🟡function</span><span class="pl-kos"></span> <span class="pl-en">removeFromFront</span><span class="pl-kos">(</span><span class="pl-s1">arr</span><span class="pl-kos">)</span><span class="pl-kos"></span> <span class="pl-kos">{</span>\n  <span class="pl-k">return</span> <span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-en">splice</span><span class="pl-kos">(</span><span class="pl-c1">1</span><span class="pl-kos">,</span><span class="pl-s1">arr</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">)</span><span class="pl-kos">;</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.</p>\n<p dir="auto"><a href="https://victor8481.tistory.com/280" rel="nofollow">https://victor8481.tistory.com/280</a> 인스턴스라는 개념을 알기 위해 검색했습니다.</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/103437860?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APgCj",
      createdAt: "2022-05-10",
      title: '결과값에서 쌍따옴표 "" 를 지울 수 있을까요?',
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/38",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKYLo",
         createdAt: "2022-05-10",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/38#discussioncomment-2720488",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Mark1237200/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Mark1237200">@Mark1237200</a> 님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto">배열의 형태를 직접 만들고 계신 것 같네요. 여러 시도를 하시는 것에 대해 찬사를 보냅니다<g-emoji class="g-emoji" alias="wind_chime" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f390.png">🎐</g-emoji><br>\n<code class="notranslate">문제를 저만의 방식으로 풀다가 결과값에서 쌍따옴표만 빼고 싶은데 방법을 모르겠습니다.</code><br>\n라는 질문에 먼저 답을 해드린다면, "[blahblah]"라는 문자열 형태를 곧바로 [blahblah] 배열 형태로 나타낼 수는 없습니다.</p>\n<p dir="auto">배열은 대괄호를 씌운 형태로 나타내어 집니다. 하지만 그것은 배열이 \'표현되는 형태\'일 뿐이지 대괄호를 씌운 문자열로 만들어 억지로 배열을 만들어낼 수는 없습니다.</p>\n<blockquote>\n<p dir="auto">왜 안돼요?</p>\n</blockquote>\n<p dir="auto">라고 물으신다면 Javascript라는 언어가 그렇게 만들어져 있기 때문입니다.</p>\n<p dir="auto">하지만, 개발자들은 질문자 분과 비슷한 생각을 항상 하곤 합니다. <em>이런 식으로 우회해서 뿅 하고 만들 수는 없을까?</em><br>\n비슷하지만 다른 방법으로 접근할 수는 있어 보입니다. 아래 키워드와 레퍼런스를 참고해서 문자열을 배열로 만드는 방법을 한 번 고민해보세요.</p>\n<p dir="auto">이런 방법들을 생각하고 연구하는 것은 꽤 머리 아프고 어려운 일입니다. 너무나 잘 하고 계십니다. 오래 걸리고 힘드시더라도 여러 번 시행착오를 겪어서 자기 것으로 만들어보세요!</p>\n<ul dir="auto">\n<li>검색어: js 문자열을 배열로(js string to array)</li>\n<li><a href="https://www.delftstack.com/ko/howto/javascript/convert-string-to-array-javascript/" rel="nofollow">괜찮아 보이는 레퍼런스</a></li>\n</ul>\n<details>\n<summary>레퍼런스를 토대로 한 예제(클릭)</summary>\n<div dir="auto">       \n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="function strToArr(str) {\n    let input = &quot;&quot;;\n    for (let i = 0; i &lt; str.length; i++) {\n        input = input + \'&quot;\' + str.substring(i, i+1) + \'&quot;\' + \',\';\n    }\n    return JSON.parse(&quot;[&quot; + input.slice(0,-1) + &quot;]&quot;)\n}"><pre><span class="pl-k">function</span> <span class="pl-en">strToArr</span><span class="pl-kos">(</span><span class="pl-s1">str</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n    <span class="pl-k">let</span> <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s">""</span><span class="pl-kos">;</span>\n    <span class="pl-k">for</span> <span class="pl-kos">(</span><span class="pl-k">let</span> <span class="pl-s1">i</span> <span class="pl-c1">=</span> <span class="pl-c1">0</span><span class="pl-kos">;</span> <span class="pl-s1">i</span> <span class="pl-c1">&lt;</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-c1">length</span><span class="pl-kos">;</span> <span class="pl-s1">i</span><span class="pl-c1">++</span><span class="pl-kos">)</span> <span class="pl-kos">{</span>\n        <span class="pl-s1">input</span> <span class="pl-c1">=</span> <span class="pl-s1">input</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s1">str</span><span class="pl-kos">.</span><span class="pl-en">substring</span><span class="pl-kos">(</span><span class="pl-s1">i</span><span class="pl-kos">,</span> <span class="pl-s1">i</span><span class="pl-c1">+</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">\'"\'</span> <span class="pl-c1">+</span> <span class="pl-s">\',\'</span><span class="pl-kos">;</span>\n    <span class="pl-kos">}</span>\n    <span class="pl-k">return</span> <span class="pl-c1">JSON</span><span class="pl-kos">.</span><span class="pl-en">parse</span><span class="pl-kos">(</span><span class="pl-s">"["</span> <span class="pl-c1">+</span> <span class="pl-s1">input</span><span class="pl-kos">.</span><span class="pl-en">slice</span><span class="pl-kos">(</span><span class="pl-c1">0</span><span class="pl-kos">,</span><span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-kos">)</span> <span class="pl-c1">+</span> <span class="pl-s">"]"</span><span class="pl-kos">)</span>\n<span class="pl-kos">}</span></pre></div>\n<p dir="auto">이런 코드가 항상 옳은 것도 아니고, 항상 틀린 것 만도 아닙니다(물론, 다소 효율적이지 못한 코드일 수 있습니다 ^^..). 여러가지 시도해보면서 이런 방법도 있구나를 익혀보세요</p>\n</div>\n</details>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시거나 해결이 힘드시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
   },
   {
      id: "D_kwDOHOApLM4APfpf",
      createdAt: "2022-05-09",
      title: "ssh key 등록을 하는 이유는 무엇인가요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/37",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW9l",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/37#discussioncomment-2715493",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요! <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a> 님, 교육 엔지니어 김홍식입니다!</p>\n<p dir="auto">질문에 답변드리기 앞서서, <a href="https://github.com/codestates-seb/agora-states-fe/discussions/2" data-hovercard-type="discussion" data-hovercard-url="/codestates-seb/agora-states-fe/discussions/2/hovercard">질문 템플릿</a>을 이용해주시길 부탁드립니다! 좀 더 좋은 답변에 도움이 됩니다.</p>\n<blockquote>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n</blockquote>\n<p dir="auto">단순히 설명드리기는 굉장히 긴 이야기가 될 것 같습니다. 향후 Section 2, Section 3 에서 네트워크에 대한 내용을 학습을 하고 나서도 이해하기 쉽게 설명드리긴 어려울 것 같아요. 하지만 차이가 궁금하시다면, 지금 이해하긴 어려울 수 있지만 잘 정리가 되어있는 <a href="https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git" rel="nofollow">레퍼런스</a>를 공유드립니다.</p>\n<p dir="auto">해당 레퍼런스를 짧게 요약드리면 ssh 사용은 아래 장점이 있습니다.<br>\n향후 "왜 그런지"에 대해서는 추가 학습을 해주시면 좋겠습니다 :)</p>\n<ul dir="auto">\n<li>https + ID/PW 입력보단 추가 암호화를 거치는 ssh가 안전하다. (그래도 https는 여전이 충분한 보안을 갖추고 있다.)</li>\n<li>여러 기기에서 사용하기에 ssh key를 다루기에 용이하다.</li>\n</ul>\n<blockquote>\n<p dir="auto">https or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식 같은 결과지만 방법만 다른 것이 맞나요?</p>\n</blockquote>\n<ul dir="auto">\n<li><code class="notranslate">git clone</code>으로 가져온 디렉터리는 코드와 Git repository가 함께 포함되어 있어, <code class="notranslate">git</code> 명령어를 사용하실 수 있습니다. (https, ssh)</li>\n<li>직접 다운로드 받은 폴더는 Git repository가 아니라서, <code class="notranslate">git</code> 명령어를 사용하실 수 없습니다.</li>\n</ul>\n<p dir="auto">답변에 도움이 되었다면, <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji> 를 부탁드립니다!</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/12145019?s=64&u=5c97f25ee02d87898457e23c0e61b884241838e3&v=4",
      },
      bodyHTML:
         '<p dir="auto">&lt;질문 1&gt;<br>\n오늘 강의 시간에 교육 엔지니어님이 하시는걸 보니 코드 클론을 받을 때 https로도 잘 받아지더라고요.</p>\n<p dir="auto">유어클래스에서는 \'보안이 강화된 shell 접속\'이라는 말이 있었는데요.</p>\n<p dir="auto">https 방식과 ssh 방식은 보안상의 차이라고 이해하면 될까요?</p>\n<p dir="auto">&lt;질문 2&gt;<br>\nhttps or ssh 클론으로 코드 내려받기, 마우스로 직접 다운로드 후 GUI 방식으로 VScode 에서 여는 방식</p>\n<p dir="auto">같은 결과지만 방법만 다른 것이 맞나요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfnk",
      createdAt: "2022-05-09",
      title: "npm install 할 때 설치 대상은 어떻게 결정되나요?",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/36",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKW7k",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/36#discussioncomment-2715364",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요 <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Gwanghyun-Jeon/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Gwanghyun-Jeon">@Gwanghyun-Jeon</a>  님!<br>\n코드스테이츠 교육 엔지니어 곽명우입니다 <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<hr>\n<p dir="auto"><code class="notranslate">package.json</code>에 적힌 <code class="notranslate">dependencies</code>는 글자 그대로 <strong>의존성</strong>을 의미합니다.</p>\n<blockquote>\n<p dir="auto"><em>이 프로젝트를 구동하기 위해서는 이러이러한 package들이 필요해</em></p>\n</blockquote>\n<p dir="auto">프로젝트에서 필요한 모듈을 가져와서 사용했고, 이 모듈들이 없으면 프로젝트는 <code class="notranslate">module not found</code> 에러를 뱉어냅니다.</p>\n<p dir="auto">여기서, 나의 프로젝트 뿐만 아니라 해당 모듈(패키지)들도 하나의 프로젝트들로 볼 수 있고, 이 녀석들도 어떠한 모듈들에 의존합니다.<br>\n<code class="notranslate">node_modules</code> 폴더에 package.json에는 기록되지 않은 수많은 모듈들이 설치되는 것은 바로 이 때문입니다.</p>\n<p dir="auto">더 자세한 내용은 다음 키워드를 검색해서 알아보세요 :)</p>\n<ul dir="auto">\n<li>package.json dependency tree (의존성 트리)</li>\n<li><code class="notranslate">npm list</code> 명령어</li>\n<li>package-lock.json 의 역할</li>\n</ul>\n<hr>\n<p dir="auto">답변이 도움이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 Mark as answer를 눌러주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n추가 질문이 있으시면 꼭! 답글을 달아주세요.</p>\n<p dir="auto">감사합니다.<br>\n코드스테이츠 교육 엔지니어<br>\n곽명우 드림</p>',
         avatarUrl:
            "https://avatars.githubusercontent.com/u/86960007?s=64&u=4863a873d78f406d658e8a50d9b91f3045006920&v=4",
      },
      bodyHTML:
         '<p dir="auto">강의에서 들을 때는 package.json 에 필요한 모듈 목록이 써 있고,<br>\nnpm install을 하면 필요한 모듈들이 다운로드 되는 걸로 이해하고 있었습니다.</p>\n<p dir="auto">오늘 과제 항목 \'fe-sprint-cli-practice-main\' 에서 package.json 내용은 아래와 같습니다.<br>\n<code class="notranslate"> "name": "fe-sprint-cli-practice", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "start": "", "test": "mocha getListMultiplesOfTwo.test.js --timeout 50000 --reporter mocha-multi-reporters --reporter-options configFile=multi-reporters.json", "report": "mocha getListMultiplesOfTwo.test.js --sort --reporter @mochajs/json-file-reporter", "submit": "codestates" }, "keywords": [], "author": "", "license": "ISC", "devDependencies": { "codestates-assignment-manager": "^1.7.0", "mocha-multi-reporters": "^1.5.1", "@mochajs/json-file-reporter": "^1.3.0", "chai": "^4.3.4", "mocha": "^8.3.2"</code><br>\n필요한 모듈이 써있는 "devDependencies" 항목에는 5개의 항목이 있는데,<br>\nnode_modules 폴더에 설치된 항목은 604개가 다운로드 되었습니다.</p>\n<p dir="auto">질문) npm install 명령어 사용시 package.json 파일에 명시 되어있는 항목만 다운로드 되는게 아닌가요?</p>',
      avatarUrl: "https://avatars.githubusercontent.com/u/73211553?s=64&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfjB",
      createdAt: "2022-05-09",
      title: "specrunner.html 파일에서는 베어테스트 통과하는데 터미널에는 오류가 발생합니다",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/35",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWnY",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/35#discussioncomment-2714072",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/JoeunNAL/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/JoeunNAL">@JoeunNAL</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">테스트가 통과되지 못한 것은 html 코드가 바뀌어서 테스트 통과가 안된 걸로 보입니다 !<br>\nhtml 코드를 기존의 배포된 html 코드로 바꾸신다면 바로 통과가 될 것 같습니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:macOS</p>\n<p dir="auto">Node.js 버전(node -v): v16.15.0</p>\n<p dir="auto">제가 만든 계산기에 npm run test를 적용할때 오류가 발생합니다.<br>\nSpecRunner.html파일을 열었을때는 베어테스트 통과한 걸로 나오는데 터미널에는 오류가 뜹니다.<br>\n터미널창에는 아예<br>\n<code class="notranslate"> bare minimum test 유어클레스 bare minimum 레슨의 예를 통과합니다.</code>라는 부분이 안나오는 것 같아요</p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401581-7c9c7fc2-9a38-4a0a-9f7b-ce33ef73fa79.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png"><img width="1440" alt="image" src="https://user-images.githubusercontent.com/90553688/167401620-a93af7bc-0230-49d0-b5f4-4365c3fbbdc7.png" style="max-width: 100%;"></a></p>\n<p><a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png"><img width="784" alt="image" src="https://user-images.githubusercontent.com/90553688/167402333-e5347db2-915f-4776-8fd2-3503ed08c2ea.png" style="max-width: 100%;"></a></p>\n<p dir="auto">제 계산기 코드에 맞게 js 파일의 아래 클래스명만 변경했고 라이브서버로 작동도 잘 됩니다.</p>\n<div class="highlight highlight-source-js position-relative overflow-auto" data-snippet-clipboard-copy-content="const calculator = document.querySelector(\'.container\'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(&quot;calculator&quot;,calculator);\nconst buttons = calculator.querySelector(\'.calculator__buttons\'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n// console.log(buttons);"><pre><span class="pl-k">const</span> <span class="pl-s1">calculator</span> <span class="pl-c1">=</span> <span class="pl-smi">document</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.container\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log("calculator",calculator);</span>\n<span class="pl-k">const</span> <span class="pl-s1">buttons</span> <span class="pl-c1">=</span> <span class="pl-s1">calculator</span><span class="pl-kos">.</span><span class="pl-en">querySelector</span><span class="pl-kos">(</span><span class="pl-s">\'.calculator__buttons\'</span><span class="pl-kos">)</span><span class="pl-kos">;</span> <span class="pl-c">// calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.</span>\n<span class="pl-c">// console.log(buttons);</span></pre></div>\n<p dir="auto">이 링크가 깃허브로 제출한 코드스테이츠 계산기에 npm run test 적용한 화면인데<br>\n제 계산기의 파일에 뜨는 순서도 다릅니다.(첫번째 사진이 스크롤 가장 위로 올렸을때입니다)<br>\n<a href="https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937" rel="nofollow">https://media.discordapp.net/attachments/973037712770736168/973179868563013642/unknown.png?width=1542&amp;height=937</a></p>\n<p dir="auto">SpecRunner.html파일이 손상됬나해서 정상 파일로 변경해보아도 같은 현상이 발생합니다.<br>\n터미널 텍스트 순서가 다를땐 어떤게 수정해야할까요??</p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/90553688?s=64&u=3c4e4dc2053d4977ac12b9cfc2667582f986d3d8&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfZU",
      createdAt: "2022-05-09",
      title: "ubuntu에서 github로그인 진행시 npx 명령어 문법 오류가 나옵니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/32",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMX",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/32#discussioncomment-2712343",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/git-daun/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/git-daun">@git-daun</a>  님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">질문 주신 내용은 과제제출 매니저 설치가 안돼서 질문 주신 것 같은데요 !</p>\n<p dir="auto">매니저 설치를 하시는 폴더가 잘못된 것 같아 안되는 것 같습니다 !<br>\n계산기 폴더 안에서 다시 한 번 설치해보시겠어요 ?</p>\n<p dir="auto">그럼에도 안된다면 다시 한 번 더 질문 부탁드립니다 !</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">상황</p>\n<ol dir="auto">\n<li>npm 설치 완료<br>\n(npm -v 확인 시 8.9.0 버전임을 확인)</li>\n<li><code class="notranslate">npx codestates-assignment-manager login</code> 입력</li>\n<li>SyntaxError<br>\n<code class="notranslate">SyntaxError: Unexpected end of JSON input at JSON.parse (&lt;anonymous&gt;) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/lib/index.js:10:26) at Module._compile (node:internal/modules/cjs/loader:1105:14) at Object.Module._extensions..js (node:internal/modules/cjs/loader:1159:10) at Module.load (node:internal/modules/cjs/loader:981:32) at Function.Module._load (node:internal/modules/cjs/loader:822:12) at Module.require (node:internal/modules/cjs/loader:1005:19) at require (node:internal/modules/cjs/helpers:102:18) at Object.&lt;anonymous&gt; (/home/daun/.npm/_npx/57ca20eb5b69f663/node_modules/codestates-assignment-manager/bin/assignment-manager:3:13) at Module._compile (node:internal/modules/cjs/loader:1105:14)</code><br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png"><img src="https://user-images.githubusercontent.com/94218285/167359803-74f304bf-a716-4080-89b8-612b63127cbb.png" alt="image" style="max-width: 100%;"></a></li>\n</ol>\n<p dir="auto">슨생님들의 많은 도움 부탁드립니다!<g-emoji class="g-emoji" alias="raising_hand_woman" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64b-2640.png">🙋‍♀️</g-emoji></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/94218285?s=64&u=96e12a65d2e9387f8a949da5103ec2751b6c1f1f&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYj",
      createdAt: "2022-05-09",
      title: "과제제출 매니저 설치 node index.js 입력시 Error: EPERM: operation not permitted, uv_cwd",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/31",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWMA",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/31#discussioncomment-2712320",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">안녕하세요. <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/hana1203/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/hana1203">@hana1203</a> 님!<br>\n코드스테이츠 교육 엔지니어 권준혁입니다. <g-emoji class="g-emoji" alias="raised_hands" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png">🙌</g-emoji></p>\n<p dir="auto">접근권한이 금지 된 것 같아 보입니다 !</p>\n<p dir="auto"><a href="https://saurus2.tistory.com/entry/ls-Operation-not-permitted-mac-OS-%EB%A7%A5%EB%B6%81-%ED%84%B0%EB%AF%B8%EB%84%90-%EC%97%90%EB%9F%AC" rel="nofollow">맥북 터미널 에러</a></p>\n<p dir="auto">위 방법과 똑같이 해보시고 그럼에도 되지 않는다면 한 번 더 과제 제출 매니저를 설치해주세요 !</p>\n<p dir="auto">npx codestates-assignment-manager login</p>\n<p dir="auto">답변이 되셨다면 내용을 간략하게 정리해서 코멘트를 남기고 answered를 마크해주세요 <g-emoji class="g-emoji" alias="white_check_mark" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png">✅</g-emoji><br>\n감사합니다.<g-emoji class="g-emoji" alias="rocket" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png">🚀</g-emoji><br>\n코드스테이츠 교육 엔지니어 권준혁</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/79903256?s=64&v=4",
      },
      bodyHTML:
         '<p dir="auto">운영 체제:<br>\nmacOS<br>\nNode.js 버전(node -v):<br>\nv16.15.0</p>\n<p dir="auto">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nUnit8 Linux/Git 기초<br>\n과제제출 매니저 설치</p>\n<p dir="auto">어떠한 부분에서 이해가 안 되었나요?<br>\nbrew 설치, nvm 설치, node.js 설치, npm 설치 다 잘되었고 javascript 파일도 node.js 로 문제없이 잘 실행되었는데, 과제제출 매니저 설치하는 부분에서 터미널에서 fe-sprint-cli-practice 파일위치로 이동해서 node index.js 를 실행하려고 하지만 계속해서 오류가 납니다.<br>\n페어분이랑도 같이 오류코드를 검색해봤더니 캐시를 지우라는 답변이 가장 많길래 캐시를 지우고 npm도 최신버전으로 업데이트하고<br>\n아래 코드도 쳐봤는데요.....<br>\nnpm cache clean --force<br>\nnpm install -g npm@latest --force</p>\n<p dir="auto">여전히 에러가 뜹니다... 관리자 권한으로도 해봤지만 여전히 같은 오류로 과제제출 매니저를 설치하지 못하고있어요..... 도와주세요..</p>\n<p dir="auto">에러 코드를 붙여넣기 해 주세요.<br>\n<a target="_blank" rel="noopener noreferrer" href="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png"><img src="https://user-images.githubusercontent.com/92300124/167353929-baf2dbbf-0ba1-4907-aadf-1fad2d64e66f.png" alt="image" style="max-width: 100%;"></a></p>\n<p dir="auto">에러가 출력된 곳에서, 이유라고 생각하는 부분을 열 줄 이내로 붙여넣기 해 주세요. (잘 모르겠으면 에러라고 생각하는 곳을 넣어주세요)<br>\nnode:internal/bootstrap/switches/does_own_process_state:126<br>\ncachedCwd = rawMethods.cwd();<br>\n^</p>\n<p dir="auto">Error: EPERM: operation not permitted, uv_cwd<br>\nat process.wrappedCwd [as cwd] (node:internal/bootstrap/switches/does_own_process_state:126:28)<br>\nat node:path:1082:24<br>\nat Object.resolve (node:path:1096:39)<br>\nat resolveMainPath (node:internal/modules/run_main:19:40)<br>\nat Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:71:24)<br>\nat node:internal/main/run_main_module:17:47 {<br>\nerrno: -1,<br>\ncode: \'EPERM\',<br>\nsyscall: \'uv_cwd\'</p>\n<p dir="auto">검색했던 링크가 있다면 첨부해 주세요.<br>\n<a href="https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd" rel="nofollow">https://www.codegrepper.com/code-examples/whatever/Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd+Uncaught+Error+Error%3A+EPERM%3A+operation+not+permitted%2C+uv_cwd</a><br>\n<a href="https://binshuuuu.tistory.com/301" rel="nofollow">https://binshuuuu.tistory.com/301</a></p>',
      avatarUrl:
         "https://avatars.githubusercontent.com/u/92300124?s=64&u=82d8e12bfca4deb05c7f86db7d3c15e06ca34d05&v=4",
   },
   {
      id: "D_kwDOHOApLM4APfYM",
      createdAt: "2022-05-09",
      title: "specRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.",
      url: "https://github.com/codestates-seb/agora-states-fe/discussions/30",
      author: "dltpdud",
      answer: {
         id: "DC_kwDOHOApLM4AKWME",
         createdAt: "2022-05-09",
         url: "https://github.com/codestates-seb/agora-states-fe/discussions/30#discussioncomment-2712324",
         author: "dltpdud",
         bodyHTML:
            '<p dir="auto">html과 css를 기존에 주어지는 목업파일로 실행 시 specrunner와 같은 결과로 나온다는걸 알게되었습니다. 혹 오류가 계속 나시는 분들은 제공되는 목업계산기에 js파일만 변경하셔서 제출하시면 오류가 없을 것 같습니다^^</p>',
         avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
      },
      bodyHTML:
         "<p dir=\"auto\">운영 체제: Ubuntu</p>\n<p dir=\"auto\">Node.js 버전(node -v): 예)v15.15.0</p>\n<p dir=\"auto\">현재 어떤 챕터/연습문제/과제를 진행 중이고, 어떤 문제에 부딪혔나요?<br>\nspecRunner에서는 통과가 되는데, node에서 bare에서 조차 통과가 되지 않습니다.<br>\ninnerHtml 을 textcontent로 변경하고 advanced test쪽을 주석처리 했음에도 통과가 되지않습니다.</p>\n<p dir=\"auto\">어떠한 부분에서 이해가 안 되었나요?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\"><pre class=\"notranslate\"><code class=\"notranslate\">const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nconst firstOperend = document.querySelector('.calculator__operend--left'); // calculator__operend--left 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst secondOperend = document.querySelector('.calculator__operend--right'); // calculator__operend--right 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nconst calculatedResult = document.querySelector('.calculator__result'); // calculator__result 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\n\nfunction calculate(n1, operator, n2) {\n\n  let result = 0;\n  if (operator === '+') {\n    result = Number(n1) + Number(n2);\n  }\n  if (operator === '-') {\n    result = Number(n1) - Number(n2);\n  }\n  if (operator === '*') {\n    result = Number(n1) * Number(n2);\n  }\n  if (operator === '/') {\n    result = Number(n1) / Number(n2);\n  }\n  // TODO : n1과 n2를 operator에 따라 계산하는 함수를 만드세요.\n  // ex) 입력값이 n1 : '1', operator : '+', n2 : '2' 인 경우, 3이 리턴됩니다.\n  return String(result);\n}\n\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n  // ! 위 코드(Line 19 - 21)는 수정하지 마세요.\n\n  if (target.matches('button')) {\n    // TODO : 계산기가 작동할 수 있도록 아래 코드를 수정하세요. 작성되어 있는 조건문과 console.log를 활용하시면 쉽게 문제를 풀 수 있습니다.\n    // 클릭된 HTML 엘리먼트가 button이면\n    if (action === 'number') {\n      // 그리고 버튼의 클레스가 number이면\n      // 아래 코드가 작동됩니다.\n        if (firstOperend.textContent === '0') {\n            firstOperend.textContent = buttonContent;\n        } else{\n            secondOperend.textContent = buttonContent;\n        }\n    }\n\n    if (action === 'operator') {\n      operator.textContent=buttonContent\n    }\n\n    if (action === 'decimal') {\n      // console.log('소수점 버튼');\n      \n    }\n\n    if (action === 'clear') {\n      firstOperend.textContent = '0';\n      operator.textContent = '+';\n      secondOperend.textContent = '0';\n      calculatedResult.textContent = '0';\n    }\n\n    if (action === 'calculate') {\n      calculatedResult.textContent = calculate(firstOperend.textContent, operator.textContent, secondOperend.textContent)\n    }\n  }\n});\n\n\n\n\n\nconst display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있습니다.\nlet firstNum, operatorForAdvanced, previousKey, previousNum;\nlet checkminus;\nlet count = 0\n//operatorForAdvanced =&gt; 연산자 나오기 전의 값을 저장\n//previousKey=&gt; 전에 누른 버튼이 뭔지 알 수 있음.\nbuttons.addEventListener('click', function (event) {\n  // 버튼을 눌렀을 때 작동하는 함수입니다.\n\n  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있습니다.\n  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옵니다.\n  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옵니다.\n \n  // ! 위 코드는 수정하지 마세요.\n\n  // ! 여기서부터 Advanced Challenge &amp; Nightmare 과제룰 풀어주세요.\n  // display.textContent = calculate(firstNum, operator, display.textContent);\n  if (target.matches('button')) {\n    if (action === 'number') {\n    \n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent=buttonContent\n      }\n      else{\n        display.textContent+=buttonContent\n      }\n      previousKey=buttonContent\n    }\n    if (action === 'operator') {\n      // if(previousKey!==)\n      firstNum=display.textContent\n      operatorForAdvanced=buttonContent\n      previousKey=buttonContent\n\n    }\n    if (action === 'decimal') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'||display.textContent==='0'){\n        display.textContent='0.'\n        previousKey='.'\n      }\n      else if(previousKey==='.'){\n        return false\n       }\n      else{\n        display.textContent=display.textContent+'.'\n        previousKey='.'\n      }\n    }\n    if (action === 'clear') {\n      count=0\n      firstNum=undefined\n      operatorForAdvanced=undefined\n      previousNum=undefined\n      previousKey=undefined\n      display.textContent='0'\n    }\n    if (action === 'calculate') {\n      if(previousKey==='*'||previousKey==='/'||previousKey==='+'||previousKey==='-'){\n        display.textContent=firstNum\n      }\n      if(operatorForAdvanced===undefined){\n        return false\n      }\n      else{\n        if(count===0){\n          previousNum=display.textContent\n        }\n      display.textContent=calculate(firstNum,operatorForAdvanced,previousNum)\n      firstNum=display.textContent\n      count=count+1\n      // previousNum =display.textContent\n      }\n    }\n  }\n\n});\n</code></pre></div>\n<p dir=\"auto\">검색했던 링크가 있다면 첨부해 주세요.</p>",
      avatarUrl: "https://avatars.githubusercontent.com/u/98820643?s=64&v=4",
   },
];

export default data;
